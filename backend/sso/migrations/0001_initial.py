# Generated by Django 4.2.11 on 2024-03-24 02:39

import datetime
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import pyotp
import sso.models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="MailOTPSession",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("data", models.JSONField(default=dict)),
                ("otp", models.CharField(default=sso.models.generate_mail_otp)),
                ("time_started", models.DateTimeField(auto_now_add=True)),
                ("email", models.EmailField(max_length=254)),
                ("available_attempts", models.SmallIntegerField(default=5)),
            ],
        ),
        migrations.CreateModel(
            name="TOTPDevice",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("secret", models.CharField(default=pyotp.random_base32)),
                (
                    "last_failed_attempt_time",
                    models.DateTimeField(default=datetime.datetime.now),
                ),
                ("next_delay_sec", models.FloatField(default=0.25)),
                ("on_cooldown", models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                ("kaist_uid", models.IntegerField(default=0)),
                (
                    "korean_name",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                ("full_name", models.CharField(max_length=100)),
                ("first_name", models.CharField(max_length=100)),
                ("last_name", models.CharField(max_length=100)),
                ("dob", models.DateField(blank=True, null=True)),
                ("nationality", models.CharField(max_length=100)),
                ("sex", models.CharField(blank=True, max_length=20, null=True)),
                (
                    "kaist_email",
                    models.EmailField(blank=True, max_length=100, null=True),
                ),
                (
                    "external_email",
                    models.EmailField(blank=True, max_length=100, null=True),
                ),
                ("employee_number", models.IntegerField(blank=True, null=True)),
                ("student_number", models.IntegerField(blank=True, null=True)),
                (
                    "bachelors_department_code",
                    models.IntegerField(blank=True, null=True),
                ),
                (
                    "bachelors_department_name",
                    models.CharField(blank=True, max_length=200, null=True),
                ),
                ("campus", models.CharField(blank=True, max_length=5, null=True)),
                ("title_english", models.CharField(max_length=100)),
                (
                    "student_status_english",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                (
                    "student_status_korean",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                ("degree_code", models.IntegerField(blank=True, null=True)),
                (
                    "degree_name_korean",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                (
                    "degree_name_english",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                ("employee_type", models.CharField(max_length=10)),
                (
                    "student_admission_datetime",
                    models.DateTimeField(blank=True, null=True),
                ),
                ("student_type_id", models.IntegerField(blank=True, null=True)),
                (
                    "student_type_class",
                    models.CharField(blank=True, max_length=20, null=True),
                ),
                (
                    "student_category_id",
                    models.CharField(blank=True, max_length=20, null=True),
                ),
                ("student_enrollment_date", models.DateField(blank=True, null=True)),
                ("student_graduation_date", models.DateField(blank=True, null=True)),
                ("student_department_id", models.IntegerField(blank=True, null=True)),
                ("sso_id", models.CharField(blank=True, max_length=100, null=True)),
                (
                    "student_department_name_english",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                (
                    "student_department_name_korean",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                ("kisa_division", models.PositiveIntegerField(default=0)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "totp_device",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="sso.totpdevice",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="TOTPUsedToken",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("time_used", models.DateTimeField()),
                ("token", models.IntegerField()),
                (
                    "device",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sso.totpdevice"
                    ),
                ),
            ],
            options={
                "index_together": {("device", "token")},
            },
        ),
    ]

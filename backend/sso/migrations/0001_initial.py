# Generated by Django 3.0 on 2021-03-11 06:08

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone
import tinymce.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='Agreement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('english', tinymce.models.HTMLField()),
                ('korean', tinymce.models.HTMLField()),
            ],
        ),
        migrations.CreateModel(
            name='LoginError',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(max_length=254)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('kaist_uid', models.IntegerField(primary_key=True, serialize=False)),
                ('korean_name', models.CharField(blank=True, max_length=100)),
                ('full_name', models.CharField(blank=True, max_length=100)),
                ('first_name', models.CharField(blank=True, max_length=100)),
                ('last_name', models.CharField(blank=True, max_length=100)),
                ('dob', models.DateField(blank=True)),
                ('nationality', models.CharField(blank=True, max_length=100)),
                ('sex', models.CharField(blank=True, max_length=20)),
                ('kaist_email', models.EmailField(blank=True, max_length=100)),
                ('external_email', models.EmailField(blank=True, max_length=100)),
                ('employee_number', models.IntegerField(blank=True)),
                ('student_number', models.IntegerField(blank=True)),
                ('bachelors_department_code', models.IntegerField(blank=True)),
                ('bachelors_department_name', models.CharField(blank=True, max_length=200)),
                ('campus', models.CharField(blank=True, max_length=5)),
                ('title_english', models.CharField(blank=True, max_length=100)),
                ('student_status_english', models.CharField(blank=True, max_length=100)),
                ('student_status_korean', models.CharField(blank=True, max_length=100)),
                ('degree_code', models.IntegerField(blank=True)),
                ('degree_name_korean', models.CharField(blank=True, max_length=100)),
                ('degree_name_english', models.CharField(blank=True, max_length=100)),
                ('user_group', models.CharField(blank=True, max_length=10)),
                ('student_admission_datetime', models.DateTimeField(blank=True)),
                ('student_type_id', models.IntegerField(blank=True)),
                ('student_type_class', models.CharField(blank=True, max_length=20)),
                ('student_category_id', models.CharField(blank=True, max_length=20)),
                ('student_enrollment_date', models.DateField(blank=True)),
                ('student_graduation_date', models.DateField(blank=True)),
                ('student_department_id', models.IntegerField(blank=True)),
                ('sso_id', models.CharField(blank=True, max_length=100)),
                ('student_department_name_english', models.CharField(blank=True, max_length=100)),
                ('student_department_name_korean', models.CharField(blank=True, max_length=100)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]

{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction \u2693\ufe0e For full documentation visit mkdocs.org . Commands \u2693\ufe0e These are the basic commands for your use. Run these in the same directory as the mkdocs.yml file. mkdocs serve - Start the live-reloading docs server. This is for previewing changes while working. mkdocs build - Build the documentation site. This will convert the markdown files into a static site and place it in a site/ directory. Not necessary to use this. mkdocs -h - Print help message and exit. Docs Guide \u2693\ufe0e File structure \u2693\ufe0e Documentation for each app should be placed in a separate folder (refer to project layout ). Each app folder should generally contain these three folders: models.md view.md custom-additions.md ( only if applicable ) Documentation content \u2693\ufe0e These are the things that should be focused on while writing documentation. models.md Explain what each model in models.py is used for. Explain what each field should contain (also talk about the reason behind any constraints on the field). views.md Explain what each view in views.py is doing/returning (pay attention to the context variable in the return statement). Note all the variables being passed to the frontend (for reference of custom-additions.md Any functions or classes written by developers for utility or abstraction. Any libraries used (include setup and usage details). Note Any documentation page which is not complete should include the following line after the page title !!! todo \"Incomplete\" Model fields data table template | Field | Type | Required | Description| Contraints | | :---: | ---- | :------: | :--------: | :--------: | | | | | | | Making a contribution \u2693\ufe0e git checkout documentation Create a markdown file in the required app folder. Follow this reference material for formatting options. git add <file-name> git commit -m <addition-summary> git push To add documentation for models.py in core app, for example, this would be the directory structure: docs/ core/ models.md Project layout \u2693\ufe0e mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. <app-folder> models.md views.md custom-additions.md","title":"Introduction"},{"location":"#introduction","text":"For full documentation visit mkdocs.org .","title":"Introduction"},{"location":"#commands","text":"These are the basic commands for your use. Run these in the same directory as the mkdocs.yml file. mkdocs serve - Start the live-reloading docs server. This is for previewing changes while working. mkdocs build - Build the documentation site. This will convert the markdown files into a static site and place it in a site/ directory. Not necessary to use this. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#docs-guide","text":"","title":"Docs Guide"},{"location":"#file-structure","text":"Documentation for each app should be placed in a separate folder (refer to project layout ). Each app folder should generally contain these three folders: models.md view.md custom-additions.md ( only if applicable )","title":"File structure"},{"location":"#documentation-content","text":"These are the things that should be focused on while writing documentation. models.md Explain what each model in models.py is used for. Explain what each field should contain (also talk about the reason behind any constraints on the field). views.md Explain what each view in views.py is doing/returning (pay attention to the context variable in the return statement). Note all the variables being passed to the frontend (for reference of custom-additions.md Any functions or classes written by developers for utility or abstraction. Any libraries used (include setup and usage details). Note Any documentation page which is not complete should include the following line after the page title !!! todo \"Incomplete\" Model fields data table template | Field | Type | Required | Description| Contraints | | :---: | ---- | :------: | :--------: | :--------: | | | | | | |","title":"Documentation content"},{"location":"#making-a-contribution","text":"git checkout documentation Create a markdown file in the required app folder. Follow this reference material for formatting options. git add <file-name> git commit -m <addition-summary> git push To add documentation for models.py in core app, for example, this would be the directory structure: docs/ core/ models.md","title":"Making a contribution"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. <app-folder> models.md views.md custom-additions.md","title":"Project layout"},{"location":"blog/models/","text":"Models \u2693\ufe0e Both models have been designed with blog Post and PostTag creation from admin panel in mind. This means there is no front-end on the website to creat a blog post. PostTag \u2693\ufe0e Inherits Tag from core Each Post is related to one or more PostTag instances and are used as a way to query for Posts. Fields \u2693\ufe0e Inherited from Tag \u2693\ufe0e tag_name Usage \u2693\ufe0e from blog.models import PostTag # Two ways to create new PostTag PostTag . objects . create ( tag_name = \"Example\" ) # or post_tag = PostTag ( tag_name = \"Example\" ) post_tag . save () Post \u2693\ufe0e Inherits Content from core Fields \u2693\ufe0e Inherited from Content \u2693\ufe0e title , content , created , modified , slug Native \u2693\ufe0e Field Type Required Description Contraints tags Native All tags the Post is associtated with image Native The cover image for the Post Will be resized to 375x375px Methods \u2693\ufe0e For a Post object passed to the front-end titled blog_post , use the following in your html file to get the image tag of the blog post's preview image. {% if blog_post.image %} {{ blog_post.get_image_tag }} {% endif %}","title":"Models"},{"location":"blog/models/#models","text":"Both models have been designed with blog Post and PostTag creation from admin panel in mind. This means there is no front-end on the website to creat a blog post.","title":"Models"},{"location":"blog/models/#posttag","text":"Inherits Tag from core Each Post is related to one or more PostTag instances and are used as a way to query for Posts.","title":"PostTag"},{"location":"blog/models/#fields","text":"","title":"Fields"},{"location":"blog/models/#inherited-from-tag","text":"tag_name","title":"Inherited from Tag"},{"location":"blog/models/#usage","text":"from blog.models import PostTag # Two ways to create new PostTag PostTag . objects . create ( tag_name = \"Example\" ) # or post_tag = PostTag ( tag_name = \"Example\" ) post_tag . save ()","title":"Usage"},{"location":"blog/models/#post","text":"Inherits Content from core","title":"Post"},{"location":"blog/models/#fields_1","text":"","title":"Fields"},{"location":"blog/models/#inherited-from-content","text":"title , content , created , modified , slug","title":"Inherited from Content"},{"location":"blog/models/#native","text":"Field Type Required Description Contraints tags Native All tags the Post is associtated with image Native The cover image for the Post Will be resized to 375x375px","title":"Native"},{"location":"blog/models/#methods","text":"For a Post object passed to the front-end titled blog_post , use the following in your html file to get the image tag of the blog post's preview image. {% if blog_post.image %} {{ blog_post.get_image_tag }} {% endif %}","title":"Methods"},{"location":"blog/views/","text":"Views \u2693\ufe0e post_view \u2693\ufe0e This is the view for a specific blog post. Query parameter: slug The route to this view will expect a slug passed in as a parameter and it will be used to query the database for a post matching it. The following context object will be accessible on the frontend template. { 'content' : str , # A string of the actual content of the blog post 'title' : str , # A string of the title of the blog post 'tags' : list , # A list of tags associated with the blog post 'image' : str , # A string of the path to the image (for use in src attribute) 'created' : str , # A date string for when the blog post was created } blog_view \u2693\ufe0e This is the view for the home page of blog app, with all blogs displayed (with recent posts first). The tag filtering button can be used to filter for blog posts. The following context object will be accessible on the frontend template. { 'tagObjects' : list , # A list of all the tags in the database 'posts' : list , # A list of all the posts on the current page (after being filtered for any tags) # The following are to facilitate the pagination 'num_results' : int , # The total number of posts (after being filtered for any tags) 'page_ids' : list , # A list of the page ids 'cur_page' : int , # The current page the user is on 'query_suffix_for_paginator' : str , # A string with all query parameters except page }","title":"Views"},{"location":"blog/views/#views","text":"","title":"Views"},{"location":"blog/views/#post_view","text":"This is the view for a specific blog post. Query parameter: slug The route to this view will expect a slug passed in as a parameter and it will be used to query the database for a post matching it. The following context object will be accessible on the frontend template. { 'content' : str , # A string of the actual content of the blog post 'title' : str , # A string of the title of the blog post 'tags' : list , # A list of tags associated with the blog post 'image' : str , # A string of the path to the image (for use in src attribute) 'created' : str , # A date string for when the blog post was created }","title":"post_view"},{"location":"blog/views/#blog_view","text":"This is the view for the home page of blog app, with all blogs displayed (with recent posts first). The tag filtering button can be used to filter for blog posts. The following context object will be accessible on the frontend template. { 'tagObjects' : list , # A list of all the tags in the database 'posts' : list , # A list of all the posts on the current page (after being filtered for any tags) # The following are to facilitate the pagination 'num_results' : int , # The total number of posts (after being filtered for any tags) 'page_ids' : list , # A list of the page ids 'cur_page' : int , # The current page the user is on 'query_suffix_for_paginator' : str , # A string with all query parameters except page }","title":"blog_view"},{"location":"core/custom-additions/","text":"Custom Additions \u2693\ufe0e Tag Filtering Use \u2693\ufe0e Backend \u2693\ufe0e Include the following in the context in your views.py file: context = { 'tagObjects' : ExampleTag . objects . order_by ( 'tag_name' ) . all (), } Replace ExampleTag with the Tag model name in the respective app. Frontend \u2693\ufe0e Include the following in your html file: {% include 'core/tag_filter.html' %} {% block js %} < script src = \"{% static 'js/tag_filter.js' %}\" ></ script > {% endblock %} Querying \u2693\ufe0e To query for posts/content based on tags, two things should be done. # models.py from core.models import TagFilterManager class Post ( models . Model ): objects = TagFilterManager () ... # views.py from .models import Post tag_list = [ 'tag1' , 'tag2' , ... ] Post . objects . filter_and ( tag_list ) # Posts containing all tags in tag_list Post . objects . filter_or ( tag_list ) # Posts containing any tag in tag_list","title":"Custom Additions"},{"location":"core/custom-additions/#custom-additions","text":"","title":"Custom Additions"},{"location":"core/custom-additions/#tag-filtering-use","text":"","title":"Tag Filtering Use"},{"location":"core/custom-additions/#backend","text":"Include the following in the context in your views.py file: context = { 'tagObjects' : ExampleTag . objects . order_by ( 'tag_name' ) . all (), } Replace ExampleTag with the Tag model name in the respective app.","title":"Backend"},{"location":"core/custom-additions/#frontend","text":"Include the following in your html file: {% include 'core/tag_filter.html' %} {% block js %} < script src = \"{% static 'js/tag_filter.js' %}\" ></ script > {% endblock %}","title":"Frontend"},{"location":"core/custom-additions/#querying","text":"To query for posts/content based on tags, two things should be done. # models.py from core.models import TagFilterManager class Post ( models . Model ): objects = TagFilterManager () ... # views.py from .models import Post tag_list = [ 'tag1' , 'tag2' , ... ] Post . objects . filter_and ( tag_list ) # Posts containing all tags in tag_list Post . objects . filter_or ( tag_list ) # Posts containing any tag in tag_list","title":"Querying"},{"location":"core/models/","text":"Models \u2693\ufe0e Incomplete Abstract \u2693\ufe0e These models are meant to be inherited and reused whenever needed. Should be used in cases where all of the fields of an abstract model can be applied to implement another model (with some additional fields if needed). Tag \u2693\ufe0e Generalized Tag model. Tags are designed for Many-to-Many relationships. Fields \u2693\ufe0e Field Type Required Description Contraints tag_name Native The name of the tag Max length is 50 (characters) and must be unique Usage \u2693\ufe0e from core.models import Tag class AppTag ( Tag ): pass Check custom additions for rendering a tag selection component on the frontend. Category \u2693\ufe0e Fields \u2693\ufe0e Generalized Category model. Categories are designed for Many-to-One relationships. Field Type Required Description Contraints title_category Native The title of the category Only '_' and '-' accepted as separators. Max 200 chars and must be unique Content \u2693\ufe0e Generalized form of a post/content model. Fields \u2693\ufe0e Field Type Required Description Contraints title Native The title of the Content Max length of 200 (characters) content Native This is an HTMLField which renders a text field as a TinyMCE editor created Native Creation date Automatically set at creation. Does not change upon edits modified Native Modification date Automatically set at creation and each update. Changes upon edits slug Native Slug version of title for use in urls Automatically created from title and creation date","title":"Models"},{"location":"core/models/#models","text":"Incomplete","title":"Models"},{"location":"core/models/#abstract","text":"These models are meant to be inherited and reused whenever needed. Should be used in cases where all of the fields of an abstract model can be applied to implement another model (with some additional fields if needed).","title":"Abstract"},{"location":"core/models/#tag","text":"Generalized Tag model. Tags are designed for Many-to-Many relationships.","title":"Tag"},{"location":"core/models/#fields","text":"Field Type Required Description Contraints tag_name Native The name of the tag Max length is 50 (characters) and must be unique","title":"Fields"},{"location":"core/models/#usage","text":"from core.models import Tag class AppTag ( Tag ): pass Check custom additions for rendering a tag selection component on the frontend.","title":"Usage"},{"location":"core/models/#category","text":"","title":"Category"},{"location":"core/models/#fields_1","text":"Generalized Category model. Categories are designed for Many-to-One relationships. Field Type Required Description Contraints title_category Native The title of the category Only '_' and '-' accepted as separators. Max 200 chars and must be unique","title":"Fields"},{"location":"core/models/#content","text":"Generalized form of a post/content model.","title":"Content"},{"location":"core/models/#fields_2","text":"Field Type Required Description Contraints title Native The title of the Content Max length of 200 (characters) content Native This is an HTMLField which renders a text field as a TinyMCE editor created Native Creation date Automatically set at creation. Does not change upon edits modified Native Modification date Automatically set at creation and each update. Changes upon edits slug Native Slug version of title for use in urls Automatically created from title and creation date","title":"Fields"},{"location":"election/models/","text":"Models \u2693\ufe0e Incomplete","title":"Models"},{"location":"election/models/#models","text":"Incomplete","title":"Models"},{"location":"election/views/","text":"Views \u2693\ufe0e Incomplete","title":"Views"},{"location":"election/views/#views","text":"Incomplete","title":"Views"},{"location":"events/models/","text":"Models \u2693\ufe0e Incomplete","title":"Models"},{"location":"events/models/#models","text":"Incomplete","title":"Models"},{"location":"events/views/","text":"Views \u2693\ufe0e Incomplete","title":"Views"},{"location":"events/views/#views","text":"Incomplete","title":"Views"},{"location":"faq/models/","text":"Models \u2693\ufe0e Incomplete","title":"Models"},{"location":"faq/models/#models","text":"Incomplete","title":"Models"},{"location":"faq/views/","text":"Views \u2693\ufe0e Incomplete","title":"Views"},{"location":"faq/views/#views","text":"Incomplete","title":"Views"},{"location":"important_links/models/","text":"Models \u2693\ufe0e Both models have been designed with blog Link and LinkCategory creation from admin panel in mind. This means there is no front-end on the website to creat a new important link. LinkCategory \u2693\ufe0e Inherits Tag from core Each Link is related to one LinkCategory. This is used as a way to query links by category. Fields \u2693\ufe0e Inherited from Category \u2693\ufe0e title_category Usage \u2693\ufe0e from important_links.models import LinkCategory # Two ways to create new LinkCategory LinkCategory . objects . create ( title_category = \"Example\" ) # or link_category = LinkCategory ( title_category = \"Example\" ) link_category . save () Link \u2693\ufe0e Fields \u2693\ufe0e Field Type Required Description Contraints title Native The display title of the link url Native The url of the link description Native Short description of what the linked website contains category Native The category of the link is_english Native Is the site in english or not requires_sso Native Does the site require KAIST SSO to use external_access Native Can the site be accessed from off-campus","title":"Models"},{"location":"important_links/models/#models","text":"Both models have been designed with blog Link and LinkCategory creation from admin panel in mind. This means there is no front-end on the website to creat a new important link.","title":"Models"},{"location":"important_links/models/#linkcategory","text":"Inherits Tag from core Each Link is related to one LinkCategory. This is used as a way to query links by category.","title":"LinkCategory"},{"location":"important_links/models/#fields","text":"","title":"Fields"},{"location":"important_links/models/#inherited-from-category","text":"title_category","title":"Inherited from Category"},{"location":"important_links/models/#usage","text":"from important_links.models import LinkCategory # Two ways to create new LinkCategory LinkCategory . objects . create ( title_category = \"Example\" ) # or link_category = LinkCategory ( title_category = \"Example\" ) link_category . save ()","title":"Usage"},{"location":"important_links/models/#link","text":"","title":"Link"},{"location":"important_links/models/#fields_1","text":"Field Type Required Description Contraints title Native The display title of the link url Native The url of the link description Native Short description of what the linked website contains category Native The category of the link is_english Native Is the site in english or not requires_sso Native Does the site require KAIST SSO to use external_access Native Can the site be accessed from off-campus","title":"Fields"},{"location":"important_links/views/","text":"Views \u2693\ufe0e links_view \u2693\ufe0e This is a list view of all important links The context will return a list of categories, which will be used to render important links grouped by category on the frontend. The following context object will be accessible on the frontend template. { 'categories' : list , # A list of categories }","title":"Views"},{"location":"important_links/views/#views","text":"","title":"Views"},{"location":"important_links/views/#links_view","text":"This is a list view of all important links The context will return a list of categories, which will be used to render important links grouped by category on the frontend. The following context object will be accessible on the frontend template. { 'categories' : list , # A list of categories }","title":"links_view"},{"location":"multimedia/models/","text":"Models \u2693\ufe0e Video \u2693\ufe0e The video models keeps track of the video uploaded to the website. Fields \u2693\ufe0e { title : title keeps the title of the video, file : file refers to the file keeping the video. date : date refers to the date the video is created or uploaded } Image \u2693\ufe0e The image model keeps track of the image uploaded to the website. Fields \u2693\ufe0e { title : title keeps the title of the image file : file refers to the file keeping the image. alt : alt keeps the alternate for the image. date : date keeps track of the date the image is created or uploaded } Multimedia \u2693\ufe0e The multimedia model connects Images and Videos together, forming a post. It contains the following fields : { title : keeps the title fo the multimedia post, slug : keeps the slug of the multimedia, tags : is a many to many field connecting multimedia with tags model for filtering, images : many to many field connecting image to multimedia, videos : many to many field connecting videos to multimedia, date : the date field contains the date the post is created previews: show the preview image for the multimedia post. }","title":"Models"},{"location":"multimedia/models/#models","text":"","title":"Models"},{"location":"multimedia/models/#video","text":"The video models keeps track of the video uploaded to the website.","title":"Video"},{"location":"multimedia/models/#fields","text":"{ title : title keeps the title of the video, file : file refers to the file keeping the video. date : date refers to the date the video is created or uploaded }","title":"Fields"},{"location":"multimedia/models/#image","text":"The image model keeps track of the image uploaded to the website.","title":"Image"},{"location":"multimedia/models/#fields_1","text":"{ title : title keeps the title of the image file : file refers to the file keeping the image. alt : alt keeps the alternate for the image. date : date keeps track of the date the image is created or uploaded }","title":"Fields"},{"location":"multimedia/models/#multimedia","text":"The multimedia model connects Images and Videos together, forming a post. It contains the following fields : { title : keeps the title fo the multimedia post, slug : keeps the slug of the multimedia, tags : is a many to many field connecting multimedia with tags model for filtering, images : many to many field connecting image to multimedia, videos : many to many field connecting videos to multimedia, date : the date field contains the date the post is created previews: show the preview image for the multimedia post. }","title":"Multimedia"},{"location":"sso/models/","text":"Models \u2693\ufe0e Incomplete","title":"Models"},{"location":"sso/models/#models","text":"Incomplete","title":"Models"},{"location":"sso/views/","text":"Views \u2693\ufe0e Incomplete","title":"Views"},{"location":"sso/views/#views","text":"Incomplete","title":"Views"}]}